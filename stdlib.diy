;; Some logical operators.

(define not
    (lambda (b)
        (if b #f #t)))

;; DIY -- Implement the rest of your standard library
;; here as part 7 of the workshop.

(define or
	(lambda (a b)
		(if a
			#t
			(if b #t #f))))

(define and
	(lambda (a b)
		(if a
			(if b #t #f)
			#f)))

(define xor
	(lambda (a b)
		(not (eq a b))))

(define >=
	(lambda (a b)
		(or
			(> a b)
			(eq a b))))

(define <=
	(lambda (a b)
		(not (> a b))))

(define <
	(lambda (a b)
		(not (>= a b))))

(define length
	(lambda (l)
		(if (empty l)
			0
			(+ 1 (length (tail l))))))

(define sum
	(lambda (l)
		(if (empty l)
			0
			(+ (head l) (sum (tail l))))))

(define range
	(lambda (min max)
		(if (< max min)
			'()
			(if (eq min max)
				(cons min '())
				(cons min (range (+ min 1) max))))))

(define append
	(lambda (fst snd)
		(if (empty fst)
			snd
			(cons (head fst) (append (tail fst) snd)))))

(define reverse
	(lambda (l)
		(if (empty l)
			l
			(append (reverse (tail l)) (cons (head l) '())))))

(define filter
	(lambda (pred l)
		(if (empty l)
			l
			(if (pred (head l))
				(cons (head l) (filter pred (tail l)))
				(filter pred (tail l))))))

(define map
	(lambda (f l)
		(if (empty l)
			l
			(cons (f (head l)) (map f (tail l))))))

(define reduce
	(lambda (f acc l)
		(if (empty l)
			acc
			(reduce f (f acc (head l)) (tail l)))))

(define compare
	(lambda (f pivot)
		(lambda (x) (f x pivot))))

(define lt
	(lambda (pivot)
		(compare < pivot)))

(define gte
	(lambda (pivot)
		(compare >= pivot)))

(define slice
	(lambda (f l)
		(filter (f (head l)) (tail l))))

(define sort
	(lambda (l)
		(if (empty l)
			l
			(append
				(sort (slice lt l))
				(cons (head l) (sort (slice gte l)))))))

;;     (define my-function
;;         (lambda (foo bar)
;;             'fuction-body-here))
;; 
;; It is a bit ugly to have to make a lambda every time you want a named function.
;; 
;; Let's add some syntactic sugar, shall we:
;; 
;;     (defn my-function (foo bar)
;;         'function-body-here)

;; (define defn
;; 	(lambda (name args body)
;; 		(define name
;; 			((lambda (args body)
;; 				(body args)) args body))))

